# Transcriptomic Age Prediction (replication attempt of 2018 model by Jason) - GridSearch hyperparameter tuning

import pandas as pd
import numpy as np
from sklearn.linear_model import ElasticNet
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import RepeatedKFold, GridSearchCV
from sklearn.metrics import mean_absolute_error, r2_score
import warnings
warnings.filterwarnings("ignore")

# --- Load Data ---
df = pd.read_csv('/content/merged_TPM_with_metadata_filtered (1).csv', index_col=0)
X_full = df.drop(columns=['Age', 'sex', 'disease'])
y = df['Age']
y_cls = pd.cut(y, bins=[0, 21, 41, 61, 81, 100],
               labels=['0-20', '21-40', '41-60', '61-80', '81-100'],
               include_lowest=True)

# --- CV Setup ---
outer_cv = RepeatedKFold(n_splits=10, n_repeats=1, random_state=42)

# parameter grids for inner search
enet_grid = {
    'alpha': [0.01, 0.1, 1.0],
    'l1_ratio': [0.0, 0.5, 1.0]
}
svr_grid = {
    'kernel': ['poly', 'rbf'],
    'degree': [2, 3],             # only for poly
    'C': [1, 10],
    'epsilon': [0.05, 0.1],
    'gamma': ['scale', 0.0002]
}

results = {'ElasticNet': [], 'SVR': [], 'Linear': [], 'LDA': []}
true_ages, pred_ages_lda = [], []
age_bin_to_mid = {'0-20':10,'21-40':30,'41-60':50,'61-80':70,'81-100':90}

for train_idx, test_idx in outer_cv.split(X_full, y_cls):
    X_train_raw, X_test_raw = X_full.iloc[train_idx], X_full.iloc[test_idx]
    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]
    y_cls_train = y_cls.iloc[train_idx]

    # your fold-specific gene filtering
    mask = []
    for g in X_train_raw.columns:
        vals = X_train_raw[g]
        if vals.max()>5 and (vals.max()/vals.replace(0,np.nan).min())>=5:
            mask.append(g)
    X_train = np.log2(X_train_raw[mask] + 1)
    X_test  = np.log2(X_test_raw[mask]  + 1)

    scaler = StandardScaler()
    X_train_s = scaler.fit_transform(X_train)
    X_test_s  = scaler.transform(X_test)

    # --- ElasticNet with inner GridSearchCV ---
    inner_cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=42)
    enet = GridSearchCV(ElasticNet(max_iter=5000), enet_grid,
                        cv=inner_cv, scoring='neg_mean_absolute_error', n_jobs=-1)
    enet.fit(X_train_s, y_train)
    pred = enet.best_estimator_.predict(X_test_s)
    results['ElasticNet'].append((mean_absolute_error(y_test, pred),
                                  r2_score(y_test, pred)))

    # --- SVR with inner GridSearchCV ---
    svr = GridSearchCV(SVR(), svr_grid,
                       cv=inner_cv, scoring='neg_mean_absolute_error', n_jobs=-1)
    svr.fit(X_train_s, y_train)
    pred = svr.best_estimator_.predict(X_test_s)
    results['SVR'].append((mean_absolute_error(y_test, pred),
                           r2_score(y_test, pred)))

    # --- Linear Regression (no tuning) ---
    lr = LinearRegression()
    lr.fit(X_train_s, y_train)
    pred = lr.predict(X_test_s)
    results['Linear'].append((mean_absolute_error(y_test, pred),
                              r2_score(y_test, pred)))

    # --- LDA (no tuning) ---
    lda = LinearDiscriminantAnalysis(solver='eigen', shrinkage='auto')
    lda.fit(X_train_s, y_cls_train)
    cls_pred = lda.predict(X_test_s)
    true_ages.extend(y_test)
    pred_ages_lda.extend([age_bin_to_mid[str(c)] for c in cls_pred])

# --- Summarize ---
def summarize(name, vals):
    mae = np.mean([v[0] for v in vals]); r2 = np.mean([v[1] for v in vals])
    print(f"{name} → MAE: {mae:.2f} | R²: {r2:.2f}")

print("\nRegression Models:")
summarize("ElasticNet", results['ElasticNet'])
summarize("SVR", results['SVR'])
summarize("LinearRegression", results['Linear'])

from sklearn.metrics import mean_absolute_error, r2_score
print("\nLDA →", end=" ")
print(f"MAE: {mean_absolute_error(true_ages, pred_ages_lda):.2f} | "
      f"R²: {r2_score(true_ages, pred_ages_lda):.2f}")
